// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Tenant {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String  @default("") @db.VarChar(255)
  logo        String  @default("") @db.VarChar(255)
  url         String  @unique @db.VarChar(255)
  Event       Event[]

  @@index(fields: [url])
}

model Event {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String      @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  description String?
  Hospital    Hospital[]
  Ambulance   Ambulance[]
  tenantId    Int
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  AidPost     AidPost[]
  logo        String?     @db.VarChar(255)
}

model AidPost {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  patientEncounters   PatientEncounter[]
  event               Event               @relation(fields: [eventId], references: [id])
  eventId             Int
  waitingRoomCapacity Int                 @default(0)
  T3Capacity          Int                 @default(0)
  T2Capacity          Int                 @default(0)
  T1Capacity          Int                 @default(0)
  SleepCapacity       Int                 @default(0)
  MedicationStorage   MedicationStorage[]
}

model PatientEncounter {
  id                 Int             @id @default(autoincrement())
  qrCode             String?
  rfid               String
  timeIn             DateTime
  methodIn           MethodIn
  ambulanceIn        Ambulance?      @relation(name: "AmbulanceIn", fields: [ambulanceInId], references: [id])
  ambulanceInId      Int?
  gender             Gender?
  age                Int?
  patientType        PatientType?
  triage             TriageCategory?
  timeTriage         DateTime?
  chiefComplaint     ChiefComplaint?
  timeStartTreatment DateTime?
  timeOut            DateTime?
  methodOut          MethodOut?
  ambulanceOut       Ambulance?      @relation(name: "AmbulanceOut", fields: [ambulanceOutId], references: [id])
  ambulanceOutId     Int?
  hospitalOut        Hospital?       @relation(fields: [hospitalOutId], references: [id])
  hospitalOutId      Int?
  userId             String
  aidPost            AidPost         @relation(fields: [aidPostId], references: [id])
  aidPostId          Int
  comments           String?
  attachments        String[]
  ParameterSet       ParameterSet[]

  @@index(fields: [rfid, qrCode])
}

model ParameterSet {
  id                     Int              @id @default(autoincrement())
  WAPA                   WAPA?
  heartRate              Int?
  saturation             Int?
  temperature            Float?
  respiratoryRate        Int?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  patientEncounter       PatientEncounter @relation(fields: [patientEncounterId], references: [id])
  patientEncounterId     Int
  createdAt              DateTime         @default(now())

  @@index(fields: [patientEncounterId])
}

model Hospital {
  id                Int                @id @default(autoincrement())
  name              String
  comment           String
  order             Int
  event             Event              @relation(fields: [eventId], references: [id])
  eventId           Int
  patientEncounters PatientEncounter[]
}

model Ambulance {
  id                Int                @id @default(autoincrement())
  name              String
  comment           String
  order             Int
  event             Event              @relation(fields: [eventId], references: [id])
  eventId           Int
  encountersWithIn  PatientEncounter[] @relation(name: "AmbulanceIn")
  encountersWithOut PatientEncounter[] @relation(name: "AmbulanceOut")
}

model MedicationStorage {
  id          Int      @id @default(autoincrement())
  rfid        String
  stickerCode String   @unique
  aidPost     AidPost  @relation(fields: [aidPostId], references: [id])
  aidPostId   Int
  description String
  active      Boolean  @default(true)
  attachment  String
  createdAt   DateTime @default(now())

  @@index(fields: [stickerCode, rfid])
}

model Feedback {
  id          Int      @id @default(autoincrement())
  name        String?
  urgent      Boolean
  description String
  new         Boolean  @default(true)
  createdAt   DateTime @default(now())
  extraInfo   String
}

enum WAPA {
  WAKKER
  AANSPREEKBAAR
  PIJNGEVOELIG
  AREACTIEF
}

enum MethodIn {
  SELF
  WITH_SUPPORT
  CREW_WALKING
  STRETCHER
  AMBULANCE
  SECURITY_POLICE
}

enum MethodOut {
  BACK_TO_FESTIVAL
  OTHER_STATION
  HOME
  TO_HOSPITAL_SELF
  TO_HOSPITAL_NDLZ
  TO_HOSPITAL_DGH
  LEFT_SELF
  LEFT_FORGOT
}

enum TriageCategory {
  RED
  YELLOW
  GREEN
  WHITE
}

enum ChiefComplaint {
  HUIDWONDE
  BRANDWONDE
  INSECTENBEET
  HECHTING
  ALLERGIE
  ZONNEALLERGIE
  PIJN
  HOODPIJN
  SPIERPIJN
  MENSTRUATIEPIJN
  HYPERVENTILATIE
  HARTKLACHTEN
  MAAG_DARM
  BOVENSTE_LUCHTWEGEN
  FLAUWTE
  INTOXICATIE
  BEWEGINGSSTELSEL
  BEELDVORMING
  OOG
  ANDERE
  PLEISTER
  MAANDVERBAND
  ZONNECREME_AFTERSUN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PatientType {
  VISITOR
  CREW
  EXTERNAL
}
